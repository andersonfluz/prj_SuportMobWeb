@model prj_chamadosBRA.Models.RegisterExternalViewModel
@{
    ViewBag.Title = "Registro de novo Usuario";
}
<h2>@ViewBag.Title.</h2>
@using (Html.BeginForm("RegisterExternal", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Crie uma nova conta.</h4>
    <hr />
    @Html.ValidationSummary()
    <div class="form-group">
        @Html.Label("Nome *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Nome, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Email *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.UserName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Confirmar Email *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.ConfirmUserName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ConfirmUserName, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Senha *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Confirmar Senha *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Matricula", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Chapa, new { @class = "form-control", title = "Informação referente a obra CAV" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Obra *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Obra, new SelectList(new prj_chamadosBRA.Repositories.ObraDAO().BuscarObras(), "IDO", "Descricao"), "-- Selecione a Obra --", new { @class = "form-control obra" })
            @Html.ValidationMessageFor(model => model.Obra, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Setor *", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.Setor, new SelectList(string.Empty, "Id", "Nome"), "-- Selecione a Obra Primeiro --", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Setor, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Contato*", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Contato, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Contato, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(m => m.Superior, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.Superior, new SelectList(string.Empty, "Id", "Nome"), "-- Selecione o Setor Primeiro --", new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Superior, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Registrar" />
        </div>
    </div>
}

@Html.Hidden("notice", @TempData["notice"])
@if (TempData["notice"] != null)
{
    <div id="modalNotice" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Mensagem</h4>
                </div>
                <div class="modal-body">
                    <p class="text-warning"><strong>@TempData["notice"]</strong></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Fechar</button>
                </div>
            </div>

        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(document).ready(function () {
            //Dropdownlist Selectedchange event
            $(".obra").change(function () {
                $("#Setor").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("RetornaSetoresPorObra", "Account")',
                    dataType: 'json',
                    data: { selectedValue: $("#Obra").val() },
                    success: function (setores) {
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $("#Setor").append('<option value="">-- Selecione o Setor --</option>');
                        $.each(setores, function (i, setor) {
                            $("#Setor").append('<option value="'
                            + setor.Value + '">'
                            + setor.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve setores.' + ex);
                    }
                });
                return false;
            })
            $("#Setor").change(function () {
                $("#Superior").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("RetornaSuperioresPorSetor", "Account")',
                    dataType: 'json',
                    data: { selectedValue: $("#Setor").val() },
                    success: function (superiores) {
                        // states contains the JSON formatted list
                        // of states passed from the controller
                        $("#Superior").append('<option value="">-- Selecione o Superior --</option>');
                        $.each(superiores, function (i, superior) {
                            $("#Superior").append('<option value="'
                            + superior.Value + '">'
                            + superior.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve setores.' + ex);
                    }
                });
                return false;
            })
        });
        $(window).load(function () {
            if ($('#notice').val() != "") {
                //alert($('#notice').val());
                $('#modalNotice').modal({ show: true });
            }
        });
    </script>
}

